#!/usr/bin/env python

import ql
import os
import ql.prepr
import ql.migrate
from ql.pg import psql
import sys
import glob
import re

if 'DB' in os.environ:
    db = os.environ['DB']
else:
    print "Please set env DB=?"
    exit(1)

def each_file(fls,cb):
    for fl in sorted(fls):
        if os.path.isfile(fl):
            cb(fl)
        else:
            print 'Could not fild file %s' % fl

def run_tests(args):
    load(['./src/tests.sql'])
    if not args:
        args = glob.glob('./test/*_spec.sql')

    psql(db, 'SELECT tests.start()')
    def run(fl):
        ql.reload_test(db, fl)

    each_file(args,run)
    res = psql(db, 'SELECT tests.fail()')
    if res['returncode'] != 0:
        print ql.hl('red','FAILED TESTS')
        report = psql(db, 'SELECT * from tests.report()')['stdout']
        print ql.hl('red', report)
        sys.exit(1)
    else:
        print ql.hl('green','All tests passed')

def compile(args):
    def run(fl):
        f = open(fl)
        print '-- FILE: %s' % fl
        print ql.prepr.process(fl, f.read())
        f.close
    each_file(args,run)

def reload(args):
    if not args: args = glob.glob('./src/**/*.sql')
    def run(fl): ql.reload(db, fl, True)
    each_file(args,run)

def load(args):
    if not args: args = glob.glob('./src/**/*.sql')
    def run(fl): ql.reload(db, fl)
    each_file(args,run)

def integrate(args):
    print psql('postgres','drop database if exists %s' % db)['stdout']
    print psql('postgres','create database %s' % db)['stdout']
    migrate(args)
    run_tests([])

def build(args):
    integrate(args)
    ql.pgdump(db)

def install(args):
    print 'TODO'


def migrate(args):
    ql.migrate.migrate(db)

def seed(args):
    if not 'PATIENTS_COUNT' in os.environ:
        print "Please set required PATIENTS_COUNT environment variable"
        exit(1)

    if not 'RAND_SEED' in os.environ:
        os.environ['RAND_SEED'] = '0.21'

    r = psql(db, """\\conninfo
                    SELECT fhir.generate_tables('{Patient,Organization,Encounter,Practitioner}');
""")

    perf_files = glob.glob('./perf/*.sql')
    reload(perf_files)

    r = psql(db, """\\timing
                 SELECT generator.generate(%(patients_count)s, %(rand_seed)s)
                 """ \
                 % {'patients_count': os.environ['PATIENTS_COUNT'],
                    'rand_seed': os.environ['RAND_SEED']})

    print r["stdout"]

def perf(args):
    perf_files = glob.glob('./perf/*.sql')
    reload(perf_files)

    benchmarks = [
        ["disk usage right after generation of seed data",
         "SELECT admin.admin_disk_usage_top(10)"],

        ["fhir.create called just one time",
         "SELECT performance.create_patients(1)"],

        ["fhir.create called 1000 times in batch",
         "SELECT performance.create_patients(1000)"],

        ["fhir.read called just one time",
         "SELECT performance.read_patients(1)"],

        ["fhir.read called 1000 times in batch",
         "SELECT performance.read_patients(1000)"],

        ["Updating single patient with fhir.update()",
         "SELECT performance.create_temporary_patients(1000);\nSELECT performance.update_patients(1)"],

        ["fhir.delete called one time",
         "SELECT performance.delete_patients(1)"],

        ["fhir.delete called 1000 times in batch",
         "SELECT performance.delete_patients(1000)"],

        ["searching for non-existent name without index",
         "SELECT count(*) FROM fhir.search('Patient', 'name=nonexistentname')"],

        ["building Patient.name index",
         "SELECT performance.index_search_param('Patient','gender')"],

        ["searching for patient with unique name",
         "SELECT performance.search_patient_with_only_one_search_candidate()"],

        ["searching for all Johns in database",
         "SELECT count(*) FROM fhir.search('Patient', 'name=John&_count=50000000')"],

        ["building Patient.gender index",
         "SELECT performance.index_search_param('Patient','gender')"],

        ["building Patient.address index",
         "SELECT performance.index_search_param('Patient','address')"],

        ["building Patient.telecom index",
         "SELECT performance.index_search_param('Patient','telecom')"],

        ["building Participant.name index",
         "SELECT performance.index_search_param('Participant','name')"],

        ["building Organization.name index",
         "SELECT performance.index_search_param('Organization','name')"],

        ["building Organization.address index",
         "SELECT performance.index_search_param('Organization','address')"]
    ]

    results = []

    for test in benchmarks:
        desc = test[0]
        sql = test[1]

        print desc
        r = psql(db, "\\timing\n%s;" % sql)
        print r["stdout"]

        m = re.search("Time: ([0-9.]+) ms", r["stdout"])
        time = m.groups()[0]

        results.append([desc, time])

        print "-" * 50

    maxlength = max([len(x[0]) for x in results]) + 5

    print "\nRESULTS:"
    for r in results:
        print "{0: <{maxlength}} {1: >10} ms".format(r[0], r[1], maxlength=maxlength)

commands = dict(test=run_tests, compile=compile, load=load, reload=reload, integrate=integrate, build=build, migrate=migrate, seed=seed, perf=perf)

if len(sys.argv) < 2:
    print "Please use command:"
    print commands.keys()
    exit(1)

cmd = sys.argv[1]


print cmd
if cmd in commands:
    print 'run command %s' % cmd
    commands[cmd](sys.argv[2:])
else:
    print 'Unknown command %s' % cmd
    print commands
