#! /bin/sh

export verbose=${verbose:-1}

export directory=$(dirname $0)

export PGHOST=${PGHOST:-localhost}
export PGPORT=${PGPORT:-5432}
export PGDATABASE=${PGDATABASE:-fhirbase}
export PGUSER=${PGUSER:-fhirbase}
export PGPASSWORD=${PGPASSWORD:-your_password}

export pg_schema=${pg_schema:-perf}
export other_database=${other_database:-postgres}

export number_of_patients=${number_of_patients:-1000}
export number_of_practitioners=${number_of_practitioners:-200}
export rand_seed=${rand_seed:-0.21}

while [ $# -gt 0 ]; do
    case "$1" in
        --verbose)
            verbose=2
            ;;
        --verbose=*)
            verbose="${1#*=}"
            ;;
        --dropdb)
            dropdb=1
            ;;
        --createdb)
            createdb=1
            ;;
        --pghost=*)
            export PGHOST="${1#*=}"
            ;;
        --pgport=*)
            export PGPORT="${1#*=}"
            ;;
        --pgdatabase=*)
            export PGDATABASE="${1#*=}"
            ;;
        --pguser=*)
            export PGUSER="${1#*=}"
            ;;
        --pgpassword=*)
            export PGPASSWORD="${1#*=}"
            ;;
        --pgschema=*)
            export pg_schema="${1#*=}"
            ;;
        --other-database=*)
            export other_database="${1#*=}"
            ;;
        --number-of-patients=*)
            export number_of_patients="${1#*=}"
            ;;
        --number-of-practitioners=*)
            export number_of_practitioners="${1#*=}"
            ;;
        --rand-seed=*)
            export rand_seed="${1#*=}"
            ;;
        *)
            printf "***************************\n"
            printf "* Error: Invalid argument.*\n"
            printf "***************************\n"
            exit 1
    esac
    shift
done

if [ "$verbose" = 0 ] || [ "$verbose" = 1 ] ; then
    exec >/dev/null
fi

if [ "$verbose" = 3 ] ; then
    echo "PGHOST=$PGHOST"
    echo "PGDATABASE=$PGDATABASE"
    echo "PGPORT=$PGPORT"
    echo "PGUSER=$PGUSER"
    echo "PGPASSWORD=$PGPASSWORD"

    echo "pg_schema=$pg_schema"
    echo "other_database=$other_database"

    echo "number_of_patients=$number_of_patients"
    echo "rand_seed=$rand_seed"
fi

if [ "$createdb" = 1 ] ; then
    if [ "$dropdb" = 1 ] ; then
        echo Drop $PGDATABASE database.
        read -r -d '' sql << EOF
DROP DATABASE IF EXISTS $PGDATABASE;
EOF
        psql $other_database --command="$sql" || exit 1
    fi

    echo Crate $PGDATABASE database.
    read -r -d '' sql << EOF
CREATE DATABASE $PGDATABASE WITH OWNER $PGUSER ENCODING = 'UTF8';
EOF
    psql $other_database --command="$sql" || exit 1

    echo Install Fhirbase into $PGDATABASE database.
    psql --file="$directory"/../tmp/build.sql || exit 1
else
    echo Assume that database $PGDATABASE.$pg_schema \
         contains installed Fhirbase.
fi

echo Load temporary tables into $PGDATABASE.$pg_schema \
     from "$directory"/data.
psql --file="$directory"/load.sql || exit 1

read -r -d '' sql << EOF
SET plv8.start_proc = 'plv8_init';
SELECT fhir_create_storage('{"resourceType": "Organization"}'::json);
SELECT fhir_create_storage('{"resourceType": "Encounter"}'::json);
SELECT fhir_create_storage('{"resourceType": "Practitioner"}'::json);
SELECT fhir_create_storage('{"resourceType": "Patient"}'::json);
EOF
psql --command="$sql" || exit 1

echo Create generation functions in $PGDATABASE.$pg_schema.
psql --file="$directory"/generate.sql || exit 1

if [ "$verbose" != 0 ] ; then
    exec > /dev/tty
fi

echo Run performance tests.
read -r -d '' sql << EOF
SET plv8.start_proc = 'plv8_init';
SELECT generate($number_of_patients, $number_of_practitioners, $rand_seed);
EOF
psql --command="$sql" || exit 1
