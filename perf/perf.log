
2016-03-23 11:03:21 EDT [24522-2] LOG:  received fast shutdown request
2016-03-23 11:03:21 EDT [24522-3] LOG:  aborting any active transactions
2016-03-23 11:03:21 EDT [24527-2] LOG:  autovacuum launcher shutting down
2016-03-23 11:03:21 EDT [24524-1] LOG:  shutting down
2016-03-23 11:03:21 EDT [24524-2] LOG:  database system is shut down
2016-03-23 11:03:23 EDT [8715-1] LOG:  database system was shut down at 2016-03-23 11:03:21 EDT
2016-03-23 11:03:23 EDT [8715-2] LOG:  MultiXact member wraparound protections are now enabled
2016-03-23 11:03:23 EDT [8714-1] LOG:  database system is ready to accept connections
2016-03-23 11:03:23 EDT [8719-1] LOG:  autovacuum launcher started
2016-03-23 11:03:23 EDT [8721-1] [unknown]@[unknown] LOG:  incomplete startup packet
2016-03-23 11:03:24 EDT [8724-1] postgres@postgres LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
2016-03-23 11:03:24 EDT [8724-2] postgres@postgres LOG:  duration: 2.262 ms
2016-03-23 11:03:24 EDT [8727-1] postgres@postgres LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
2016-03-23 11:03:24 EDT [8727-2] postgres@postgres LOG:  duration: 0.973 ms
2016-03-23 11:03:25 EDT [8730-1] postgres@postgres LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
2016-03-23 11:03:25 EDT [8730-2] postgres@postgres LOG:  duration: 1.037 ms
2016-03-23 11:03:25 EDT [8767-1] fhirbase@postgres LOG:  statement: DROP DATABASE IF EXISTS fhirbase;
2016-03-23 11:03:25 EDT [8767-2] fhirbase@postgres LOG:  duration: 107.741 ms
2016-03-23 11:03:25 EDT [8777-1] fhirbase@postgres LOG:  statement: CREATE DATABASE fhirbase WITH OWNER fhirbase ENCODING = 'UTF8';
2016-03-23 11:03:26 EDT [8777-2] fhirbase@postgres LOG:  duration: 232.126 ms
2016-03-23 11:03:26 EDT [8787-1] fhirbase@fhirbase LOG:  statement: CREATE SCHEMA IF NOT EXISTS perf;
2016-03-23 11:03:26 EDT [8787-2] fhirbase@fhirbase LOG:  duration: 0.812 ms
2016-03-23 11:03:26 EDT [8800-1] fhirbase@fhirbase LOG:  statement: SET search_path TO perf;
2016-03-23 11:03:26 EDT [8800-2] fhirbase@fhirbase LOG:  duration: 0.155 ms
2016-03-23 11:03:28 EDT [8813-1] fhirbase@fhirbase LOG:  statement: SET search_path TO perf;
2016-03-23 11:03:28 EDT [8813-2] fhirbase@fhirbase LOG:  duration: 0.156 ms
2016-03-23 11:03:28 EDT [8813-3] fhirbase@fhirbase LOG:  statement: DROP TABLE IF EXISTS first_names;
2016-03-23 11:03:28 EDT [8813-4] fhirbase@fhirbase LOG:  duration: 0.219 ms
2016-03-23 11:03:28 EDT [8813-5] fhirbase@fhirbase LOG:  statement: DROP TABLE IF EXISTS last_names;
2016-03-23 11:03:28 EDT [8813-6] fhirbase@fhirbase LOG:  duration: 0.087 ms
2016-03-23 11:03:28 EDT [8813-7] fhirbase@fhirbase LOG:  statement: DROP TABLE IF EXISTS languages;
2016-03-23 11:03:28 EDT [8813-8] fhirbase@fhirbase LOG:  duration: 0.083 ms
2016-03-23 11:03:28 EDT [8813-9] fhirbase@fhirbase LOG:  statement: DROP TABLE IF EXISTS street_names;
2016-03-23 11:03:28 EDT [8813-10] fhirbase@fhirbase LOG:  duration: 0.111 ms
2016-03-23 11:03:28 EDT [8813-11] fhirbase@fhirbase LOG:  statement: DROP TABLE IF EXISTS cities;
2016-03-23 11:03:28 EDT [8813-12] fhirbase@fhirbase LOG:  duration: 0.083 ms
2016-03-23 11:03:28 EDT [8813-13] fhirbase@fhirbase LOG:  statement: DROP TABLE IF EXISTS organization_names;
2016-03-23 11:03:28 EDT [8813-14] fhirbase@fhirbase LOG:  duration: 0.096 ms
2016-03-23 11:03:28 EDT [8813-15] fhirbase@fhirbase LOG:  statement: CREATE TABLE first_names (
	  sex text,
	  first_name text
	);
2016-03-23 11:03:28 EDT [8813-16] fhirbase@fhirbase LOG:  duration: 7.386 ms
2016-03-23 11:03:28 EDT [8813-17] fhirbase@fhirbase LOG:  statement: CREATE TABLE last_names (
	  last_name text
	);
2016-03-23 11:03:28 EDT [8813-18] fhirbase@fhirbase LOG:  duration: 1.801 ms
2016-03-23 11:03:28 EDT [8813-19] fhirbase@fhirbase LOG:  statement: CREATE TABLE languages (
	  code text,
	  name text
	);
2016-03-23 11:03:28 EDT [8813-20] fhirbase@fhirbase LOG:  duration: 1.796 ms
2016-03-23 11:03:28 EDT [8813-21] fhirbase@fhirbase LOG:  statement: CREATE TABLE street_names (
	  street_name text
	);
2016-03-23 11:03:28 EDT [8813-22] fhirbase@fhirbase LOG:  duration: 1.761 ms
2016-03-23 11:03:28 EDT [8813-23] fhirbase@fhirbase LOG:  statement: CREATE TABLE cities (
	  zip text,
	  state text,
	  city text,
	  latitude float,
	  longitude float
	);
2016-03-23 11:03:28 EDT [8813-24] fhirbase@fhirbase LOG:  duration: 1.820 ms
2016-03-23 11:03:28 EDT [8813-25] fhirbase@fhirbase LOG:  statement: CREATE TABLE organization_names (
	  organization_name text
	);
2016-03-23 11:03:28 EDT [8813-26] fhirbase@fhirbase LOG:  duration: 2.035 ms
2016-03-23 11:03:28 EDT [8813-27] fhirbase@fhirbase LOG:  statement: DROP FUNCTION IF EXISTS load_dummy_data() CASCADE;
2016-03-23 11:03:28 EDT [8813-28] fhirbase@fhirbase LOG:  duration: 0.300 ms
2016-03-23 11:03:28 EDT [8813-29] fhirbase@fhirbase LOG:  statement: CREATE OR REPLACE FUNCTION load_dummy_data()
	RETURNS void AS $$
	  BEGIN
	    RAISE NOTICE 'Load fake "first_names".';
	    COPY first_names (sex, first_name) FROM '/fhirbase/perf/data/first_names.csv';
	
	    RAISE NOTICE 'Load fake "last_names".';
	    COPY last_names (last_name) FROM '/fhirbase/perf/data/last_names.csv';
	
	    RAISE NOTICE 'Load fake "languages".';
	    COPY languages (code, name) FROM '/fhirbase/perf/data/language-codes-iso-639-1-alpha-2.csv' WITH csv;
	
	    RAISE NOTICE 'Load fake "street_names".';
	    COPY street_names (street_name) FROM '/fhirbase/perf/data/street_names.csv';
	
	    RAISE NOTICE 'Load fake "cities".';
	    COPY cities (zip, state, city, latitude, longitude) FROM '/fhirbase/perf/data/cities.csv' WITH csv;
	
	    RAISE NOTICE 'Load fake "organization_names".';
	    COPY organization_names (organization_name) FROM '/fhirbase/perf/data/organization_names.csv';
	  END
	$$ LANGUAGE plpgsql;
2016-03-23 11:03:28 EDT [8813-30] fhirbase@fhirbase LOG:  duration: 2.379 ms
2016-03-23 11:03:28 EDT [8823-1] fhirbase@fhirbase LOG:  statement: SET search_path TO perf;
2016-03-23 11:03:28 EDT [8823-2] fhirbase@fhirbase LOG:  duration: 0.163 ms
2016-03-23 11:03:28 EDT [8823-3] fhirbase@fhirbase LOG:  statement: SELECT load_dummy_data();
2016-03-23 11:03:28 EDT [8823-4] fhirbase@fhirbase LOG:  duration: 136.648 ms
2016-03-23 11:03:28 EDT [8833-1] fhirbase@fhirbase LOG:  statement: SET search_path TO perf;
2016-03-23 11:03:28 EDT [8833-2] fhirbase@fhirbase LOG:  duration: 0.159 ms
2016-03-23 11:03:28 EDT [8833-3] fhirbase@fhirbase LOG:  statement: SET plv8.start_proc = 'plv8_init';
2016-03-23 11:03:28 EDT [8833-4] fhirbase@fhirbase LOG:  duration: 0.112 ms
2016-03-23 11:03:28 EDT [8833-5] fhirbase@fhirbase LOG:  statement: SELECT fhir_create_storage('{"resourceType": "Organization"}'::json);
2016-03-23 11:03:28 EDT [8833-6] fhirbase@fhirbase ERROR:  function fhir_create_storage(json) does not exist at character 8
2016-03-23 11:03:28 EDT [8833-7] fhirbase@fhirbase HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2016-03-23 11:03:28 EDT [8833-8] fhirbase@fhirbase STATEMENT:  SELECT fhir_create_storage('{"resourceType": "Organization"}'::json);
2016-03-23 11:03:28 EDT [8833-9] fhirbase@fhirbase LOG:  statement: SELECT fhir_create_storage('{"resourceType": "Encounter"}'::json);
2016-03-23 11:03:28 EDT [8833-10] fhirbase@fhirbase ERROR:  function fhir_create_storage(json) does not exist at character 8
2016-03-23 11:03:28 EDT [8833-11] fhirbase@fhirbase HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2016-03-23 11:03:28 EDT [8833-12] fhirbase@fhirbase STATEMENT:  SELECT fhir_create_storage('{"resourceType": "Encounter"}'::json);
2016-03-23 11:03:28 EDT [8833-13] fhirbase@fhirbase LOG:  statement: SELECT fhir_create_storage('{"resourceType": "Practitioner"}'::json);
2016-03-23 11:03:28 EDT [8833-14] fhirbase@fhirbase ERROR:  function fhir_create_storage(json) does not exist at character 8
2016-03-23 11:03:28 EDT [8833-15] fhirbase@fhirbase HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2016-03-23 11:03:28 EDT [8833-16] fhirbase@fhirbase STATEMENT:  SELECT fhir_create_storage('{"resourceType": "Practitioner"}'::json);
2016-03-23 11:03:28 EDT [8833-17] fhirbase@fhirbase LOG:  statement: SELECT fhir_create_storage('{"resourceType": "Patient"}'::json);
2016-03-23 11:03:28 EDT [8833-18] fhirbase@fhirbase ERROR:  function fhir_create_storage(json) does not exist at character 8
2016-03-23 11:03:28 EDT [8833-19] fhirbase@fhirbase HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2016-03-23 11:03:28 EDT [8833-20] fhirbase@fhirbase STATEMENT:  SELECT fhir_create_storage('{"resourceType": "Patient"}'::json);
2016-03-23 11:03:28 EDT [8844-1] fhirbase@fhirbase LOG:  statement: SET search_path TO perf;
2016-03-23 11:03:28 EDT [8844-2] fhirbase@fhirbase LOG:  duration: 0.159 ms
2016-03-23 11:03:28 EDT [8844-3] fhirbase@fhirbase LOG:  statement: DROP FUNCTION IF EXISTS random(a numeric, b numeric) CASCADE;
2016-03-23 11:03:28 EDT [8844-4] fhirbase@fhirbase LOG:  duration: 0.360 ms
2016-03-23 11:03:28 EDT [8844-5] fhirbase@fhirbase LOG:  statement: CREATE OR REPLACE FUNCTION random(a numeric, b numeric)
	RETURNS numeric AS $$
	  SELECT ceil(a + (b - a) * random())::numeric;
	$$ LANGUAGE SQL;
2016-03-23 11:03:28 EDT [8844-6] fhirbase@fhirbase LOG:  duration: 1.825 ms
2016-03-23 11:03:28 EDT [8844-7] fhirbase@fhirbase LOG:  statement: DROP FUNCTION IF EXISTS random_elem(a anyarray) CASCADE;
2016-03-23 11:03:28 EDT [8844-8] fhirbase@fhirbase LOG:  duration: 0.249 ms
2016-03-23 11:03:28 EDT [8844-9] fhirbase@fhirbase LOG:  statement: CREATE OR REPLACE FUNCTION random_elem(a anyarray)
	RETURNS anyelement AS $$
	  SELECT a[1 + floor(RANDOM() * array_length(a, 1))];
	$$ LANGUAGE SQL;
2016-03-23 11:03:28 EDT [8844-10] fhirbase@fhirbase LOG:  duration: 0.434 ms
2016-03-23 11:03:28 EDT [8844-11] fhirbase@fhirbase LOG:  statement: DROP FUNCTION IF EXISTS random_date() CASCADE;
2016-03-23 11:03:28 EDT [8844-12] fhirbase@fhirbase LOG:  duration: 0.214 ms
2016-03-23 11:03:28 EDT [8844-13] fhirbase@fhirbase LOG:  statement: CREATE OR REPLACE FUNCTION random_date()
	RETURNS text AS $$
	  SELECT random(1900, 2010)::text
	           || '-'
	           || lpad(random(1, 12)::text, 2, '0')
	           || '-'
	           || lpad(random(1, 28)::text, 2, '0');
	$$ LANGUAGE SQL;
2016-03-23 11:03:28 EDT [8844-14] fhirbase@fhirbase LOG:  duration: 0.695 ms
2016-03-23 11:03:28 EDT [8844-15] fhirbase@fhirbase LOG:  statement: DROP FUNCTION IF EXISTS random_phone() CASCADE;
2016-03-23 11:03:28 EDT [8844-16] fhirbase@fhirbase LOG:  duration: 0.236 ms
2016-03-23 11:03:28 EDT [8844-17] fhirbase@fhirbase LOG:  statement: CREATE OR REPLACE FUNCTION random_phone()
	RETURNS text AS $$
	  SELECT '+' || random(1, 12)::text ||
	         ' (' || random(1, 999)::text || ') ' ||
	         lpad(random(1, 999)::text, 3, '0') ||
	         '-' ||
	         lpad(random(1, 99)::text, 2, '0') ||
	         '-' ||
	         lpad(random(1, 99)::text, 2, '0')
	$$ LANGUAGE SQL;
2016-03-23 11:03:28 EDT [8844-18] fhirbase@fhirbase LOG:  duration: 0.508 ms
2016-03-23 11:03:28 EDT [8844-19] fhirbase@fhirbase LOG:  statement: DROP FUNCTION IF EXISTS make_address(_street_name_ text, _zip_ text, _city_ text, _state_ text) CASCADE;
2016-03-23 11:03:28 EDT [8844-20] fhirbase@fhirbase LOG:  duration: 0.160 ms
2016-03-23 11:03:28 EDT [8844-21] fhirbase@fhirbase LOG:  statement: CREATE OR REPLACE FUNCTION make_address(_street_name_ text, _zip_ text, _city_ text, _state_ text)
	RETURNS jsonb AS $$
	  select array_to_json(ARRAY[
	    json_build_object(
	      'use', 'home',
	      'line', ARRAY[_street_name_ || ' ' || random(0, 100)::text],
	      'city', _city_,
	      'postalCode', _zip_::text,
	      'state', _state_,
	      'country', 'US'
	    )
	  ])::jsonb;
	$$ LANGUAGE SQL;
2016-03-23 11:03:28 EDT [8844-22] fhirbase@fhirbase LOG:  duration: 0.767 ms
2016-03-23 11:03:28 EDT [8844-23] fhirbase@fhirbase LOG:  statement: DROP FUNCTION IF EXISTS insert_organizations() CASCADE;
2016-03-23 11:03:28 EDT [8844-24] fhirbase@fhirbase LOG:  duration: 0.193 ms
2016-03-23 11:03:28 EDT [8844-25] fhirbase@fhirbase LOG:  statement: CREATE OR REPLACE FUNCTION insert_organizations()
	RETURNS bigint AS $$
	  with organizations_source as (
	    select organization_name, row_number() over ()
	    from organization_names
	    order by random()
	  ), street_names_source as (
	    select street_name, row_number() over ()
	    from street_names
	    order by random()
	  ), cities_source as (
	    select city, zip, state, row_number() over ()
	    from cities
	    order by random()
	  ), organization_data as (
	    select *,
	           random_phone() as phone
	    from organizations_source
	    join street_names_source using (row_number)
	    join cities_source using (row_number)
	  ), inserted as (
	    INSERT into organization (id, version_id, resource)
	    SELECT obj->>'id', obj#>>'{meta,versionId}', obj
	    FROM (
	      SELECT
	        json_build_object(
	         'resourceType', 'Organization',
	         'id', gen_random_uuid(),
	         'name', organization_name,
	         'telecom', ARRAY[
	           json_build_object(
	            'system', 'phone',
	            'value', phone,
	            'use', 'work'
	           )
	         ],
	         'address', make_address(street_name, zip, city, state)
	        )::jsonb as obj
	        FROM organization_data
	    ) _
	    RETURNING id
	  )
	  select count(*) inserted;
	$$ LANGUAGE SQL;
2016-03-23 11:03:28 EDT [8844-26] fhirbase@fhirbase ERROR:  relation "organization" does not exist at character 669
2016-03-23 11:03:28 EDT [8844-27] fhirbase@fhirbase STATEMENT:  CREATE OR REPLACE FUNCTION insert_organizations()
	RETURNS bigint AS $$
	  with organizations_source as (
	    select organization_name, row_number() over ()
	    from organization_names
	    order by random()
	  ), street_names_source as (
	    select street_name, row_number() over ()
	    from street_names
	    order by random()
	  ), cities_source as (
	    select city, zip, state, row_number() over ()
	    from cities
	    order by random()
	  ), organization_data as (
	    select *,
	           random_phone() as phone
	    from organizations_source
	    join street_names_source using (row_number)
	    join cities_source using (row_number)
	  ), inserted as (
	    INSERT into organization (id, version_id, resource)
	    SELECT obj->>'id', obj#>>'{meta,versionId}', obj
	    FROM (
	      SELECT
	        json_build_object(
	         'resourceType', 'Organization',
	         'id', gen_random_uuid(),
	         'name', organization_name,
	         'telecom', ARRAY[
	           json_build_object(
	            'system', 'phone',
	            'value', phone,
	            'use', 'work'
	           )
	         ],
	         'address', make_address(street_name, zip, city, state)
	        )::jsonb as obj
	        FROM organization_data
	    ) _
	    RETURNING id
	  )
	  select count(*) inserted;
	$$ LANGUAGE SQL;
2016-03-23 11:03:28 EDT [8844-28] fhirbase@fhirbase LOG:  statement: DROP FUNCTION IF EXISTS insert_practitioners(_total_count_ integer) CASCADE;
2016-03-23 11:03:28 EDT [8844-29] fhirbase@fhirbase LOG:  duration: 0.235 ms
2016-03-23 11:03:28 EDT [8844-30] fhirbase@fhirbase LOG:  statement: CREATE OR REPLACE FUNCTION insert_practitioners(_total_count_ integer)
	RETURNS bigint AS $$
	  with first_names_source as (
	    select *, row_number() over () from (
	      select CASE WHEN sex = 'M' THEN 'male' ELSE 'female' END as sex,
	             first_name
	      from first_names
	      order by random()
	      limit _total_count_) _
	  ), last_names_source as (
	    select *, row_number() over () from (
	      select last_name
	      from last_names
	      order by random()
	      limit _total_count_) _
	  ), practitioner_data as (
	    select *
	    from first_names_source
	    join last_names_source using (row_number)
	  ), inserted as (
	    INSERT into practitioner (id, version_id, resource)
	    SELECT obj->>'id', obj#>>'{meta,versionId}', obj
	    FROM (
	      SELECT
	        json_build_object(
	         'resourceType', 'Practitioner',
	         'id', gen_random_uuid(),
	         'name', ARRAY[
	           json_build_object(
	            'given', ARRAY[first_name],
	            'family', ARRAY[last_name]
	           )
	         ]
	        )::jsonb as obj
	        FROM practitioner_data
	    ) _
	    RETURNING id
	  )
	  select count(*) from practitioner_data;
	$$ LANGUAGE SQL;
2016-03-23 11:03:28 EDT [8844-31] fhirbase@fhirbase ERROR:  relation "practitioner" does not exist at character 655
2016-03-23 11:03:28 EDT [8844-32] fhirbase@fhirbase STATEMENT:  CREATE OR REPLACE FUNCTION insert_practitioners(_total_count_ integer)
	RETURNS bigint AS $$
	  with first_names_source as (
	    select *, row_number() over () from (
	      select CASE WHEN sex = 'M' THEN 'male' ELSE 'female' END as sex,
	             first_name
	      from first_names
	      order by random()
	      limit _total_count_) _
	  ), last_names_source as (
	    select *, row_number() over () from (
	      select last_name
	      from last_names
	      order by random()
	      limit _total_count_) _
	  ), practitioner_data as (
	    select *
	    from first_names_source
	    join last_names_source using (row_number)
	  ), inserted as (
	    INSERT into practitioner (id, version_id, resource)
	    SELECT obj->>'id', obj#>>'{meta,versionId}', obj
	    FROM (
	      SELECT
	        json_build_object(
	         'resourceType', 'Practitioner',
	         'id', gen_random_uuid(),
	         'name', ARRAY[
	           json_build_object(
	            'given', ARRAY[first_name],
	            'family', ARRAY[last_name]
	           )
	         ]
	        )::jsonb as obj
	        FROM practitioner_data
	    ) _
	    RETURNING id
	  )
	  select count(*) from practitioner_data;
	$$ LANGUAGE SQL;
2016-03-23 11:03:28 EDT [8844-33] fhirbase@fhirbase LOG:  statement: DROP FUNCTION IF EXISTS insert_patients(_total_count_ integer) CASCADE;
2016-03-23 11:03:28 EDT [8844-34] fhirbase@fhirbase LOG:  duration: 0.173 ms
2016-03-23 11:03:28 EDT [8844-35] fhirbase@fhirbase LOG:  statement: CREATE OR REPLACE FUNCTION insert_patients(_total_count_ integer)
	RETURNS bigint AS $$
	  with first_names_source as (
	    select CASE WHEN sex = 'M' THEN 'male' ELSE 'female' END as sex,
	           first_name,
	           row_number() over ()
	    from first_names
	    cross join generate_series(0, ceil(_total_count_::float
	                                       / (select count(*)
	                                          from first_names)::float)::integer)
	    order by random()
	  ), last_names_source as (
	    select last_name, row_number() over ()
	    from last_names
	    cross join generate_series(0, ceil(_total_count_::float
	                                       / (select count(*)
	                                          from last_names)::float)::integer)
	    order by random()
	  ), street_names_source as (
	    select street_name, row_number() over ()
	    from street_names
	    cross join generate_series(0, ceil(_total_count_::float
	                                       / (select count(*)
	                                          from street_names)::float)::integer)
	    order by random()
	  ), cities_source as (
	    select city, zip, state, row_number() over ()
	    from cities
	    cross join generate_series(0, ceil(_total_count_::float
	                                       / (select count(*)
	                                          from cities)::float)::integer)
	    order by random()
	  ), languages_source as (
	    select code as language_code,
	           name as language_name,
	           row_number() over ()
	    from languages
	    cross join generate_series(0, ceil(_total_count_::float
	                                       / (select count(*)
	                                          from languages)::float)::integer)
	    order by random()
	  ), organizations_source as (
	    select id as organization_id,
	           resource#>>'{name}' as organization_name,
	           row_number() over ()
	    from organization
	    cross join generate_series(0, ceil(_total_count_::float
	                                       / (select count(*)
	                                          from organization)::float)::integer)
	    order by random()
	  ), patient_data as (
	    select
	      *,
	      random_date() as birth_date,
	      random_phone() as phone
	    from first_names_source
	    join last_names_source using (row_number)
	    join street_names_source using (row_number)
	    join cities_source using (row_number)
	    join languages_source using (row_number)
	    join organizations_source using (row_number)
	  ), inserted as (
	    INSERT into patient (id, version_id, resource)
	    SELECT obj->>'id', obj#>>'{meta,versionId}', obj
	    FROM (
	      SELECT
	        json_build_object(
	         'resourceType', 'Patient',
	         'id', gen_random_uuid(),
	         'meta', json_build_object(
	            'versionId', gen_random_uuid(),
	            'lastUpdated', CURRENT_TIMESTAMP
	          ),
	         'gender', sex,
	         'birthDate', birth_date,
	         'active', TRUE,
	         'name', ARRAY[
	           json_build_object(
	            'given', ARRAY[first_name],
	            'family', ARRAY[last_name]
	           )
	         ],
	         'telecom', ARRAY[
	           json_build_object(
	            'system', 'phone',
	            'value', phone,
	            'use', 'home'
	           )
	         ],
	         'address', make_address(street_name, zip, city, state),
	         'communication', ARRAY[
	           json_build_object(
	             'language',
	             json_build_object(
	               'coding', ARRAY[
	                 json_build_object(
	                   'system', 'urn:ietf:bcp:47',
	                   'code', language_code,
	                   'display', language_name
	                 )
	               ],
	               'text', language_name
	             ),
	             'preferred', TRUE
	           )
	         ],
	         'identifier', ARRAY[
	           json_build_object(
	             'use', 'usual',
	             'system', 'urn:oid:2.16.840.1.113883.2.4.6.3',
	             'value', random(6000000, 100000000)::text
	           ),
	           json_build_object(
	             'use', 'usual',
	             'system', 'urn:oid:1.2.36.146.595.217.0.1',
	             'value', random(6000000, 100000000)::text,
	             'label', 'MRN'
	           )
	         ],
	         'managingOrganization', json_build_object(
	           'reference', 'Organization/' || organization_id,
	           'display', organization_name
	         )
	        )::jsonb as obj
	        FROM patient_data
	        LIMIT _total_count_
	    ) _
	    RETURNING id
	  )
	  select count(*) inserted;
	$$ LANGUAGE SQL;
2016-03-23 11:03:28 EDT [8844-36] fhirbase@fhirbase ERROR:  relation "organization" does not exist at character 1930
2016-03-23 11:03:28 EDT [8844-37] fhirbase@fhirbase STATEMENT:  CREATE OR REPLACE FUNCTION insert_patients(_total_count_ integer)
	RETURNS bigint AS $$
	  with first_names_source as (
	    select CASE WHEN sex = 'M' THEN 'male' ELSE 'female' END as sex,
	           first_name,
	           row_number() over ()
	    from first_names
	    cross join generate_series(0, ceil(_total_count_::float
	                                       / (select count(*)
	                                          from first_names)::float)::integer)
	    order by random()
	  ), last_names_source as (
	    select last_name, row_number() over ()
	    from last_names
	    cross join generate_series(0, ceil(_total_count_::float
	                                       / (select count(*)
	                                          from last_names)::float)::integer)
	    order by random()
	  ), street_names_source as (
	    select street_name, row_number() over ()
	    from street_names
	    cross join generate_series(0, ceil(_total_count_::float
	                                       / (select count(*)
	                                          from street_names)::float)::integer)
	    order by random()
	  ), cities_source as (
	    select city, zip, state, row_number() over ()
	    from cities
	    cross join generate_series(0, ceil(_total_count_::float
	                                       / (select count(*)
	                                          from cities)::float)::integer)
	    order by random()
	  ), languages_source as (
	    select code as language_code,
	           name as language_name,
	           row_number() over ()
	    from languages
	    cross join generate_series(0, ceil(_total_count_::float
	                                       / (select count(*)
	                                          from languages)::float)::integer)
	    order by random()
	  ), organizations_source as (
	    select id as organization_id,
	           resource#>>'{name}' as organization_name,
	           row_number() over ()
	    from organization
	    cross join generate_series(0, ceil(_total_count_::float
	                                       / (select count(*)
	                                          from organization)::float)::integer)
	    order by random()
	  ), patient_data as (
	    select
	      *,
	      random_date() as birth_date,
	      random_phone() as phone
	    from first_names_source
	    join last_names_source using (row_number)
	    join street_names_source using (row_number)
	    join cities_source using (row_number)
	    join languages_source using (row_number)
	    join organizations_source using (row_number)
	  ), inserted as (
	    INSERT into patient (id, version_id, resource)
	    SELECT obj->>'id', obj#>>'{meta,versionId}', obj
	    FROM (
	      SELECT
	        json_build_object(
	         'resourceType', 'Patient',
	         'id', gen_random_uuid(),
	         'meta', json_build_object(
	            'versionId', gen_random_uuid(),
	            'lastUpdated', CURRENT_TIMESTAMP
	          ),
	         'gender', sex,
	         'birthDate', birth_date,
	         'active', TRUE,
	         'name', ARRAY[
	           json_build_object(
	            'given', ARRAY[first_name],
	            'family', ARRAY[last_name]
	           )
	         ],
	         'telecom', ARRAY[
	           json_build_object(
	            'system', 'phone',
	            'value', phone,
	            'use', 'home'
	           )
	         ],
	         'address', make_address(street_name, zip, city, state),
	         'communication', ARRAY[
	           json_build_object(
	             'language',
	             json_build_object(
	               'coding', ARRAY[
	                 json_build_object(
	                   'system', 'urn:ietf:bcp:47',
	                   'code', language_code,
	                   'display', language_name
	                 )
	               ],
	               'text', language_name
	             ),
	             'preferred', TRUE
	           )
	         ],
	         'identifier', ARRAY[
	           json_build_object(
	             'use', 'usual',
	             'system', 'urn:oid:2.16.840.1.113883.2.4.6.3',
	             'value', random(6000000, 100000000)::text
	           ),
	           json_build_object(
	             'use', 'usual',
	             'system', 'urn:oid:1.2.36.146.595.217.0.1',
	             'value', random(6000000, 100000000)::text,
	             'label', 'MRN'
	           )
	         ],
	         'managingOrganization', json_build_object(
	           'reference', 'Organization/' || organization_id,
	           'display', organization_name
	         )
	        )::jsonb as obj
	        FROM patient_data
	        LIMIT _total_count_
	    ) _
	    RETURNING id
	  )
	  select count(*) inserted;
	$$ LANGUAGE SQL;
2016-03-23 11:03:28 EDT [8844-38] fhirbase@fhirbase LOG:  statement: DROP FUNCTION IF EXISTS insert_encounters() CASCADE;
2016-03-23 11:03:28 EDT [8844-39] fhirbase@fhirbase LOG:  duration: 0.164 ms
2016-03-23 11:03:28 EDT [8844-40] fhirbase@fhirbase LOG:  statement: CREATE OR REPLACE FUNCTION insert_encounters()
	RETURNS bigint AS $$
	  WITH patients_ids_source as (
	    SELECT id as patient_id,
	           row_number() over ()
	      FROM patient
	
	    UNION ALL
	
	    SELECT patient_id, row_number() over ()
	    FROM (SELECT id as patient_id
	          FROM patient order by random()
	          LIMIT (select count(*) from patient) / 3) _
	  ), practitioners_source AS (
	    SELECT id as practitioner_id,
	           row_number() OVER ()
	    FROM practitioner
	    CROSS JOIN generate_series(0, ceil((select count(*) from patients_ids_source)::float
	                                       / (select count(*)
	                                          from practitioner)::float)::integer)
	    ORDER by random()
	  ), encounter_data as (
	    SELECT *,
	           random_elem(ARRAY['inpatient',
	                             'outpatient',
	                             'ambulatory',
	                             'emergency']) as class,
	           random_elem(ARRAY['in-progress',
	                             'planned',
	                             'arrived',
	                             'onleave',
	                             'cancelled',
	                             'finished']) as status
	    FROM patients_ids_source
	    JOIN practitioners_source using (row_number)
	  ), inserted as (
	    INSERT into encounter (id, version_id, resource)
	    SELECT obj->>'id', obj#>>'{meta,versionId}', obj
	    FROM (
	      SELECT
	        json_build_object(
	         'resourceType', 'Encounter',
	         'id', gen_random_uuid(),
	         'status', status,
	         'class', class,
	         'patient', json_build_object(
	           'reference', 'Patient/' || patient_id
	         ),
	         'participant', ARRAY[
	           json_build_object(
	             'individual', json_build_object(
	               'reference', 'Practitioner/' || practitioner_id
	             )
	           )
	         ]
	        )::jsonb as obj
	        FROM encounter_data
	    ) _
	    RETURNING id
	  )
	  SELECT 42::bigint;
	$$ LANGUAGE SQL;
2016-03-23 11:03:28 EDT [8844-41] fhirbase@fhirbase ERROR:  relation "patient" does not exist at character 173
2016-03-23 11:03:28 EDT [8844-42] fhirbase@fhirbase STATEMENT:  CREATE OR REPLACE FUNCTION insert_encounters()
	RETURNS bigint AS $$
	  WITH patients_ids_source as (
	    SELECT id as patient_id,
	           row_number() over ()
	      FROM patient
	
	    UNION ALL
	
	    SELECT patient_id, row_number() over ()
	    FROM (SELECT id as patient_id
	          FROM patient order by random()
	          LIMIT (select count(*) from patient) / 3) _
	  ), practitioners_source AS (
	    SELECT id as practitioner_id,
	           row_number() OVER ()
	    FROM practitioner
	    CROSS JOIN generate_series(0, ceil((select count(*) from patients_ids_source)::float
	                                       / (select count(*)
	                                          from practitioner)::float)::integer)
	    ORDER by random()
	  ), encounter_data as (
	    SELECT *,
	           random_elem(ARRAY['inpatient',
	                             'outpatient',
	                             'ambulatory',
	                             'emergency']) as class,
	           random_elem(ARRAY['in-progress',
	                             'planned',
	                             'arrived',
	                             'onleave',
	                             'cancelled',
	                             'finished']) as status
	    FROM patients_ids_source
	    JOIN practitioners_source using (row_number)
	  ), inserted as (
	    INSERT into encounter (id, version_id, resource)
	    SELECT obj->>'id', obj#>>'{meta,versionId}', obj
	    FROM (
	      SELECT
	        json_build_object(
	         'resourceType', 'Encounter',
	         'id', gen_random_uuid(),
	         'status', status,
	         'class', class,
	         'patient', json_build_object(
	           'reference', 'Patient/' || patient_id
	         ),
	         'participant', ARRAY[
	           json_build_object(
	             'individual', json_build_object(
	               'reference', 'Practitioner/' || practitioner_id
	             )
	           )
	         ]
	        )::jsonb as obj
	        FROM encounter_data
	    ) _
	    RETURNING id
	  )
	  SELECT 42::bigint;
	$$ LANGUAGE SQL;
2016-03-23 11:03:28 EDT [8844-43] fhirbase@fhirbase LOG:  statement: DROP FUNCTION IF EXISTS generate(_number_of_patients_ integer,
	                                 _number_of_practitioners_ integer,
	                                 _rand_seed_ float) CASCADE;
2016-03-23 11:03:28 EDT [8844-44] fhirbase@fhirbase LOG:  duration: 0.179 ms
2016-03-23 11:03:28 EDT [8844-45] fhirbase@fhirbase LOG:  statement: CREATE OR REPLACE FUNCTION generate(_number_of_patients_ integer,
	                                    _number_of_practitioners_ integer,
	                                    _rand_seed_ float)
	RETURNS bigint AS $$
	  BEGIN
	    TRUNCATE TABLE organization, organization_history,
	                   encounter, encounter_history,
	                   practitioner, practitioner_history,
	                   patient, patient_history;
	    PERFORM insert_organizations();
	    PERFORM insert_practitioners(_number_of_practitioners_);
	    PERFORM insert_patients(_number_of_patients_);
	    PERFORM insert_encounters();
	  RETURN (SELECT count(*) FROM patient);
	  END
	$$ LANGUAGE plpgsql;
2016-03-23 11:03:28 EDT [8844-46] fhirbase@fhirbase LOG:  duration: 1.521 ms
2016-03-23 11:03:28 EDT [8854-1] fhirbase@fhirbase LOG:  statement: SET search_path TO perf;
2016-03-23 11:03:28 EDT [8854-2] fhirbase@fhirbase LOG:  duration: 0.159 ms
2016-03-23 11:03:28 EDT [8854-3] fhirbase@fhirbase LOG:  statement: SET plv8.start_proc = 'plv8_init';
2016-03-23 11:03:28 EDT [8854-4] fhirbase@fhirbase LOG:  duration: 0.300 ms
2016-03-23 11:03:28 EDT [8854-5] fhirbase@fhirbase LOG:  statement: SELECT generate(1000, 200, 0.21);
2016-03-23 11:03:28 EDT [8854-6] fhirbase@fhirbase ERROR:  relation "organization" does not exist
2016-03-23 11:03:28 EDT [8854-7] fhirbase@fhirbase CONTEXT:  SQL statement "TRUNCATE TABLE organization, organization_history,
	                   encounter, encounter_history,
	                   practitioner, practitioner_history,
	                   patient, patient_history"
	PL/pgSQL function generate(integer,integer,double precision) line 3 at SQL statement
2016-03-23 11:03:28 EDT [8854-8] fhirbase@fhirbase STATEMENT:  SELECT generate(1000, 200, 0.21);
2016-03-23 11:03:28 EDT [8864-1] fhirbase@fhirbase LOG:  statement: SET search_path TO perf;
2016-03-23 11:03:28 EDT [8864-2] fhirbase@fhirbase LOG:  duration: 0.164 ms
2016-03-23 11:03:28 EDT [8864-3] fhirbase@fhirbase LOG:  statement: SET plv8.start_proc = 'plv8_init';
2016-03-23 11:03:28 EDT [8864-4] fhirbase@fhirbase LOG:  duration: 0.109 ms
2016-03-23 11:03:28 EDT [8864-5] fhirbase@fhirbase LOG:  statement: SELECT fhir_conformance('{"somekey": "somevalue"}'::json);
2016-03-23 11:03:28 EDT [8864-6] fhirbase@fhirbase ERROR:  function fhir_conformance(json) does not exist at character 8
2016-03-23 11:03:28 EDT [8864-7] fhirbase@fhirbase HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2016-03-23 11:03:28 EDT [8864-8] fhirbase@fhirbase STATEMENT:  SELECT fhir_conformance('{"somekey": "somevalue"}'::json);
